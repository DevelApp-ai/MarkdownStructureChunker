name: Validate Pull Request

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read          # Read repository content
  issues: write          # Comment on issues/PRs
  pull-requests: write   # Interact with pull requests

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for GitVersion
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      id: restore
      run: dotnet restore
      continue-on-error: true
      
    - name: Build solution
      id: build
      run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.semVer }}
      continue-on-error: true
      
    - name: Run tests
      id: test
      run: dotnet test --configuration Release --no-build --verbosity normal
      continue-on-error: true
      
    - name: Create package
      id: package
      run: dotnet pack ./Core/Core.csproj --configuration Release --no-build --output ./artifacts /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
      continue-on-error: true
      
    - name: Comment PR with validation results
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const context = require('@actions/github').context;
            
            // Check if this is a pull request
            if (!context.payload.pull_request) {
              console.log('Not a pull request, skipping comment');
              return;
            }
            
            const prNumber = context.payload.pull_request.number;
            const restoreStatus = '${{ steps.restore.outcome }}' === 'success' ? '✅' : '❌';
            const buildStatus = '${{ steps.build.outcome }}' === 'success' ? '✅' : '❌';
            const testStatus = '${{ steps.test.outcome }}' === 'success' ? '✅' : '❌';
            const packageStatus = '${{ steps.package.outcome }}' === 'success' ? '✅' : '❌';
            
            const allPassed = '${{ steps.restore.outcome }}' === 'success' && 
                             '${{ steps.build.outcome }}' === 'success' && 
                             '${{ steps.test.outcome }}' === 'success' && 
                             '${{ steps.package.outcome }}' === 'success';
            
            const version = '${{ steps.gitversion.outputs.nuGetVersionV2 }}';
            const semVer = '${{ steps.gitversion.outputs.semVer }}';
            
            const body = `## 🤖 PR Validation Results
            
            **Version**: \`${version}\` (SemVer: \`${semVer}\`)
            
            | Step | Status | Details |
            |------|--------|---------|
            | Restore Dependencies | ${restoreStatus} | NuGet package restoration |
            | Build Solution | ${buildStatus} | Compilation and build |
            | Run Tests | ${testStatus} | Unit and integration tests |
            | Create Package | ${packageStatus} | NuGet package creation |
            
            ${allPassed ? 
              '🎉 **This PR is ready for review!** All validation checks passed.' : 
              '⚠️ **Please fix the issues above before merging.** Some validation checks failed.'
            }
            
            ---
            *This comment was automatically generated by the PR validation workflow.*`;
            
            // Try to find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🤖 PR Validation Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
              console.log('Updated existing PR validation comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
              console.log('Created new PR validation comment');
            }
            
          } catch (error) {
            console.error('Error posting PR comment:', error);
            console.error('Error details:', {
              message: error.message,
              status: error.status,
              response: error.response?.data
            });
            
            // Don't fail the workflow if commenting fails
            console.log('Continuing workflow despite comment failure...');
          }

