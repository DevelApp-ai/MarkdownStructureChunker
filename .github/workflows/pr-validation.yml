name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests with coverage
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Validate package can be built
      run: dotnet pack Core/Core.csproj --configuration Release --output ./validation-packages
      
    - name: Check package contents
      run: |
        echo "Package contents:"
        if ls ./validation-packages/*.nupkg 1> /dev/null 2>&1; then
          unzip -l ./validation-packages/*.nupkg | head -20
        else
          echo "No .nupkg files found"
          ls -la ./validation-packages/
        fi
        
    - name: Comment PR with validation results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );
          
          const body = `## PR Validation Results
          
          ✅ **Build**: Successful
          ✅ **Tests**: All tests passed
          ✅ **Package**: NuGet package builds correctly
          
          This PR is ready for review!`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

