# Example Docker Compose for MarkdownStructureChunker with ONNX
# This demonstrates a complete deployment setup

version: '3.8'

services:
  # Main application with ONNX models
  markdown-chunker:
    build:
      context: ../..  # Build from repository root
      dockerfile: docs/onnx-setup/Dockerfile.example
    container_name: markdown-chunker-app
    ports:
      - "8080:80"
    environment:
      # Application settings
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      
      # ONNX configuration
      - ONNX_MODEL_PATH=/app/models/multilingual-e5-large/model.onnx
      - ONNX_TOKENIZER_PATH=/app/models/multilingual-e5-large/tokenizer.json
      - ONNX_INTER_OP_THREADS=4
      - ONNX_INTRA_OP_THREADS=4
      - ONNX_ENABLE_MEMORY_PATTERN=1
      - ONNX_ENABLE_CPU_MEM_ARENA=1
      
      # Performance tuning
      - OMP_NUM_THREADS=4
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
      - DOTNET_RUNNING_IN_CONTAINER=true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Networks
    networks:
      - app-network

  # Optional: Redis for caching vectors
  redis:
    image: redis:7-alpine
    container_name: markdown-chunker-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: markdown-chunker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - markdown-chunker
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: markdown-chunker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: markdown-chunker-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

