# Podman Compose file for MarkdownStructureChunker with ONNX
# Optimized for Podman's features including rootless containers and pods

version: '3.8'

services:
  # Main application with ONNX models
  markdown-chunker:
    build:
      context: ../..  # Build from repository root
      dockerfile: docs/onnx-setup/Containerfile.podman
    container_name: markdown-chunker-app
    ports:
      - "8080:8080"  # Using non-privileged port for rootless
    environment:
      # Application settings
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      
      # ONNX configuration
      - ONNX_MODEL_PATH=/app/models/multilingual-e5-large/model.onnx
      - ONNX_TOKENIZER_PATH=/app/models/multilingual-e5-large/tokenizer.json
      - ONNX_INTER_OP_THREADS=4
      - ONNX_INTRA_OP_THREADS=4
      - ONNX_ENABLE_MEMORY_PATTERN=1
      - ONNX_ENABLE_CPU_MEM_ARENA=1
      
      # Performance tuning
      - OMP_NUM_THREADS=4
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_USE_POLLING_FILE_WATCHER=true
      
      # Redis connection
      - REDIS_CONNECTION_STRING=redis:6379
    
    # Podman-specific security options
    security_opt:
      - "no-new-privileges:true"
      - "label=type:container_runtime_t"
    
    # Resource limits (Podman format)
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "journald"
      options:
        tag: "markdown-chunker"
    
    # Dependencies
    depends_on:
      - redis
    
    # Networks
    networks:
      - app-network
    
    # Volumes for persistent data
    volumes:
      - app-logs:/app/logs
      - app-temp:/app/temp

  # Redis for caching vectors and session data
  redis:
    image: redis:7-alpine
    container_name: markdown-chunker-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - app-network
    
    # Security for Redis
    security_opt:
      - "no-new-privileges:true"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    
    # Health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Logging
    logging:
      driver: "journald"
      options:
        tag: "redis"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: markdown-chunker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro,Z
      - ./ssl:/etc/nginx/ssl:ro,Z
      - nginx-cache:/var/cache/nginx
    depends_on:
      - markdown-chunker
    restart: unless-stopped
    networks:
      - app-network
    
    # Security
    security_opt:
      - "no-new-privileges:true"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Logging
    logging:
      driver: "journald"
      options:
        tag: "nginx"

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: markdown-chunker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro,Z
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    restart: unless-stopped
    networks:
      - app-network
    
    # Security
    security_opt:
      - "no-new-privileges:true"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Logging
    logging:
      driver: "journald"
      options:
        tag: "prometheus"

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: markdown-chunker-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro,Z
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro,Z
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network
    
    # Security
    security_opt:
      - "no-new-privileges:true"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Logging
    logging:
      driver: "journald"
      options:
        tag: "grafana"

# Networks with Podman-specific configuration
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "markdown-chunker-br"
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes with Podman-specific options
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  app-temp:
    driver: local
  
  nginx-cache:
    driver: local

# Podman-specific extensions
x-podman-options:
  # Global Podman settings
  userns_mode: "keep-id"
  security_opt:
    - "label=type:container_runtime_t"
  
  # Resource defaults
  default_resources:
    limits:
      memory: 1G
      cpus: '1.0'
    reservations:
      memory: 512M
      cpus: '0.5'

